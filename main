# coding=utf-8
from __future__ import print_function, absolute_import, unicode_literals
from gm.api import *
from sklearn import preprocessing

'''
策略思路：
1、公司的资产负债率小于等于 25%
2、公司每股净现金大于 0
3、当前股价与每股自由现金流量比小于 10(市现率)
4、在所有股票中取市盈率排倒数30%的股票(首先PE必须大于0)
5、PEG=市盈率/净利润增长率<0.5
回测数据:SHSE.000906的成份股
回测时间:2016-01-01 08:00:00到2018-01-01 16:00:00
'''


def init(context):
    # 每月第一个交易日的09:40 定时执行algo任务
    schedule(schedule_func=algo, date_rule='1m', time_rule='09:40:00')


def algo(context):
    # 获取上一个交易日的日期
    last_day = get_previous_trading_date(exchange='SHSE', date=context.now)
    # 获取沪深300成份股
    stock800 = get_history_constituents(index='SHSE.000906', start_date=last_day,
                                                end_date=last_day)[0]['constituents'].keys()
    # 获取当天有交易的股票
    not_suspended = get_history_instruments(symbols=stock800, start_date=last_day, end_date=last_day)
    not_suspended = [item['symbol'] for item in not_suspended if not item['is_suspended']]
    df = get_fundamentals(table='deriv_finance_indicator', symbols=not_suspended, start_date=last_day, end_date=last_day,
                           fields='ASSLIABRT,NCFPS,NPGRT', df=True)
    fin=get_fundamentals(table='trading_derivative_indicator', symbols=not_suspended, start_date=last_day, end_date=last_day,
                           fields='PCLFY,PELFY', df=True)
    df['PCLFY']=fin['PCLFY']
    df['PELFY'] = fin['PELFY']

    # 除去空值
    df = df.dropna()
    df['PEG']=df['PELFY']/df['NPGRT']
    df.index=df.symbol
    del df['symbol'],df['pub_date'],df['end_date']
    print(df)
    # 选出PEG小于0.5的部分
    df = df[df['PEG'] < 0.5]
    # 选出债务总资产比小于0.25的部分
    df = df[df["ASSLIABRT"] < 25]
    # 选出每股净现金大于 0的部分
    df = df[df["NCFPS"] > 0]
    # 选出市盈率大于零的部分
    df = df[df['PELFY'] > 0]
    # 选出市现率小于10的部分
    df = df[df['PCLFY'] < 10]

    print(df)
    # 剔除市盈率较高的股票（即剔除3分位数以后的股票）

    if len(df)<4:
        symbols_pool = list(df.index)
    else:
        df = df[(df['PELFY'] < df['PELFY'].quantile(0.3))]
        symbols_pool = list(df.index)
    print(symbols_pool)
    order_close_all()

    long=len(symbols_pool)
    if long==0:
        return
    # 获取股票的权重
    percent = 1 / long
    # 买在标的池中的股票
    for symbol in symbols_pool:
        order_target_percent(symbol=symbol, percent=percent, order_type=OrderType_Market,
                             position_side=PositionSide_Long)
        #print(symbol, '以市价单调多仓到仓位', percent)


if __name__ == '__main__':
    '''
    strategy_id策略ID,由系统生成
    filename文件名,请与本文件名保持一致
    mode实时模式:MODE_LIVE回测模式:MODE_BACKTEST
    token绑定计算机的ID,可在系统设置-密钥管理中生成
    backtest_start_time回测开始时间
    backtest_end_time回测结束时间
    backtest_adjust股票复权方式不复权:ADJUST_NONE前复权:ADJUST_PREV后复权:ADJUST_POST
    backtest_initial_cash回测初始资金
    backtest_commission_ratio回测佣金比例
    backtest_slippage_ratio回测滑点比例
    '''
    run(strategy_id='73bb5bf2-a536-11e8-bd52-9cd21ef04ea9',
        filename='GARP.py',
        mode=MODE_BACKTEST,
        token='c395247a76e8a5caeee699d668d6f550213bc418',
        backtest_start_time='2016-01-01 08:00:00',
        backtest_end_time='2018-01-01 16:00:00',
        backtest_adjust=ADJUST_PREV,
        backtest_initial_cash=10000000,
        backtest_commission_ratio=0.0001,
        backtest_slippage_ratio=0.0001)
